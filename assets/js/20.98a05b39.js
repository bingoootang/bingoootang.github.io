(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{257:function(e,n,s){"use strict";s.r(n);var a=s(4),t=Object(a.a)({},function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"koa-与-co-源码解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#koa-与-co-源码解读","aria-hidden":"true"}},[e._v("#")]),e._v(" KOA 与 CO 源码解读")]),e._v(" "),s("blockquote",[s("p",[e._v("KOA 与 CO 的实现都非常的短小精悍，只需要花费很短的时间就可以将源代码通读一遍。以下是一些浅要的分析。")])]),e._v(" "),s("h2",{attrs:{id:"如何用-node-实现一个-web-服务器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何用-node-实现一个-web-服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" 如何用 node 实现一个 web 服务器")]),e._v(" "),s("p",[e._v("既然 KOA 实现了 web 服务器，那我们就先从最原始的 web 服务器的实现方式着手。"),s("br"),e._v("\n下面的代码中我们创建了一个始终返回请求路径的 web 服务器。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const http = require('http');\nconst server = http.createServer((req, res) => {\n  res.end(req.url);\n});\nserver.listen(8001);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("当你请求 "),s("code",[e._v("http://localhost:8001/some/url")]),e._v(" 的时候，得到的响应就是 "),s("code",[e._v("/some/url")]),e._v("。")]),e._v(" "),s("h2",{attrs:{id:"koa-的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#koa-的实现","aria-hidden":"true"}},[e._v("#")]),e._v(" KOA 的实现")]),e._v(" "),s("blockquote",[s("p",[e._v("简单的说，KOA 就是对上面这段代码的封装。")])]),e._v(" "),s("p",[e._v("首先看下 KOA 的大概目录结构：")]),e._v(" "),s("p",[s("img",{attrs:{src:"/images/2016/koa-co/koa-dir.png",alt:"KOA目录结构"}})]),e._v(" "),s("p",[s("code",[e._v("lib")]),e._v(" 目录下只有四个文件，其中 "),s("code",[e._v("request.js")]),e._v(" 和 "),s("code",[e._v("response.js")]),e._v(" 是对 node 原生的 "),s("code",[e._v("request(req)")]),e._v(" 和 "),s("code",[e._v("response(res)")]),e._v(" 的增强，提供了很多便利的方法，"),s("code",[e._v("context.js")]),e._v(" 就是著名的上下文。我们暂时抛开这三个文件的细节，先看下主文件 "),s("code",[e._v("application.js")]),e._v(" 的实现。")]),e._v(" "),s("p",[e._v("先关注两个函数：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 构造函数    \nfunction Application() {\n  if (!(this instanceof Application)) return new Application;\n  this.env = process.env.NODE_ENV || 'development';\n  this.subdomainOffset = 2;\n  this.middleware = [];\n  this.proxy = false;\n  this.context = Object.create(context);\n  this.request = Object.create(request);\n  this.response = Object.create(response);\n}  \n// listen 方法   \napp.listen = function(){\n  debug('listen');\n  var server = http.createServer(this.callback());\n  return server.listen.apply(server, arguments);\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("上面的这两个函数，正是完成了一个 web 服务器的建立过程：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const server = new KOA();  // new Application()\nserver.listen(8001);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("而先前 "),s("code",[e._v("http.createServer()")]),e._v(" 的那个回调函数则被替换成了 "),s("code",[e._v("app.callback")]),e._v(" 的返回值。")]),e._v(" "),s("p",[e._v("我们细看下 "),s("code",[e._v("app.callback")]),e._v(" 的具体实现：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("app.callback = function(){\n  if (this.experimental) {\n    console.error('Experimental ES7 Async Function support is deprecated. Please look into Koa v2 as the middleware signature has changed.')\n  }\n  var fn = this.experimental\n    ? compose_es7(this.middleware)\n    : co.wrap(compose(this.middleware));\n  var self = this;\n\n  if (!this.listeners('error').length) this.on('error', this.onerror);\n\n  return function handleRequest(req, res){\n    res.statusCode = 404;\n    var ctx = self.createContext(req, res);\n    onFinished(res, ctx.onerror);\n    fn.call(ctx).then(function handleResponse() {\n      respond.call(ctx);\n    }).catch(ctx.onerror);\n  }\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br")])]),s("p",[e._v("先跳过 ES7 的实验功能以及错误处理，"),s("code",[e._v("app.callback")]),e._v(" 中主要做了如下几件事情：")]),e._v(" "),s("ul",[s("li",[e._v("重新组合中间件并用 co 包装")]),e._v(" "),s("li",[e._v("返回处理request的回调函数")])]),e._v(" "),s("p",[e._v("每当服务器接收到请求时，做如下处理：")]),e._v(" "),s("ul",[s("li",[e._v("初始化上下文")]),e._v(" "),s("li",[e._v("调用之前 "),s("code",[e._v("co.wrap")]),e._v(" 返回的函数，并做必要的错误处理")])]),e._v(" "),s("p",[e._v("现在我们把目光集中到这三行代码中：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 中间件重组与 co 包装  \nvar fn = co.wrap(compose(this.middleware));\n// ------------------------------------------  \n// 在处理 request 的回调函数中  \n// 创建每次请求的上下文  \nvar ctx = self.createContext(req, res);  \n// 调用 co 包装的函数，执行中间件  \nfn.call(ctx).then(function handleResponse() {\n  respond.call(ctx);\n}).catch(ctx.onerror);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("先看第一行代码，"),s("code",[e._v("compose")]),e._v(" 实际上就是 "),s("code",[e._v("koa-compose")]),e._v("，实现如下：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function compose(middleware){\n  return function *(next){\n    if (!next) next = noop();\n    var i = middleware.length;\n    while (i--) {\n      next = middleware[i].call(this, next);\n    }\n    return yield *next;\n  }\n}\nfunction *noop(){}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("p",[s("code",[e._v("compose")]),e._v(" 返回一个 "),s("code",[e._v("generator函数")]),e._v("，这个 "),s("code",[e._v("generator函数")]),e._v(" 中倒序依次以 "),s("code",[e._v("next")]),e._v(" 为参数调用每个中间件，并将返回的"),s("code",[e._v("generator实例")]),e._v(" 重新赋值给 "),s("code",[e._v("next")]),e._v("，最终将 "),s("code",[e._v("next")]),e._v("返回。")]),e._v(" "),s("p",[e._v("这里比较有趣也比较关键的一点是：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("next = middleware[i].call(this, next);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("我们知道，调用 "),s("code",[e._v("generator函数")]),e._v(" 返回 "),s("code",[e._v("generator实例")]),e._v("，当 "),s("code",[e._v("generator函数")]),e._v(" 中调用其他的 "),s("code",[e._v("generator函数")]),e._v(" 的时候，需要通过 "),s("code",[e._v("yield *genFunc()")]),e._v(" 显式调用另一个 "),s("code",[e._v("generator函数")]),e._v("。")]),e._v(" "),s("p",[e._v("举个例子：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("const genFunc1 = function* () {\n  yield 1;\n  yield *genFunc2();\n  yield 4;\n}\nconst genFunc2 = function* () {\n  yield 2;\n  yield 3;\n}\nfor (let d of genFunc1()) {\n  console.log(d);\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[e._v("执行的结果是在控制台依次打印 1，2，3，4。")]),e._v(" "),s("p",[e._v("回到上面的 "),s("code",[e._v("compose")]),e._v(" 函数，其实它就是完成上面例子中的 "),s("code",[e._v("genFunc1")]),e._v(" 调用 "),s("code",[e._v("genFunc2")]),e._v(" 的事情。而 "),s("code",[e._v("next")]),e._v(" 的作用就是保存并传递下一个中间件函数返回的 "),s("code",[e._v("generator实例")]),e._v("。")]),e._v(" "),s("p",[e._v("参考一下 KOA 中间件的写法以帮助理解：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function* (next) {\n  // do sth.\n  yield next;\n  // do sth.\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("通过 "),s("code",[e._v("compose")]),e._v(" 函数，KOA 把中间件全部级联了起来，形成了一个 "),s("code",[e._v("generator")]),e._v(" 链。下一步就是完成上面例子中的 "),s("code",[e._v("for-of")]),e._v("循环的事情了，而这正是 co 的工作。")]),e._v(" "),s("h2",{attrs:{id:"co-的原理分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#co-的原理分析","aria-hidden":"true"}},[e._v("#")]),e._v(" co 的原理分析")]),e._v(" "),s("p",[e._v("还是先看下 "),s("code",[e._v("co.wrap")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("co.wrap = function (fn) {\n  createPromise.__generatorFunction__ = fn;\n  return createPromise;\n  function createPromise() {\n    return co.call(this, fn.apply(this, arguments));\n  }\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("该函数返回一个函数 "),s("code",[e._v("createPromise")]),e._v("，也就是 KOA 源码里面的 "),s("code",[e._v("fn")]),e._v("。"),s("br"),e._v("\n当调用这个函数的时候，实际上调用的是 "),s("code",[e._v("co")]),e._v("，只是将上下文 "),s("code",[e._v("ctx")]),e._v(" 作为 "),s("code",[e._v("this")]),e._v(" 传递了进来。")]),e._v(" "),s("p",[e._v("现在分析下 "),s("code",[e._v("co")]),e._v("的代码：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function co(gen) {\n  var ctx = this;\n  var args = slice.call(arguments, 1)\n  // 返回一个 promise\n  return new Promise(function(resolve, reject) {\n    if (typeof gen === 'function') gen = gen.apply(ctx, args);\n    if (!gen || typeof gen.next !== 'function') return resolve(gen);\n    \n    onFulfilled();\n    \n    function onFulfilled(res) {\n      var ret;\n      try {\n        ret = gen.next(res);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    function onRejected(err) {\n      var ret;\n      try {\n        ret = gen.throw(err);\n      } catch (e) {\n        return reject(e);\n      }\n      next(ret);\n    }\n\n    function next(ret) {\n      if (ret.done) return resolve(ret.value);\n      var value = toPromise.call(ctx, ret.value);\n      if (value && isPromise(value)) return value.then(onFulfilled, onRejected);\n      return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, '\n        + 'but the following object was passed: \"' + String(ret.value) + '\"'));\n    }\n  });\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("p",[s("code",[e._v("co")]),e._v(" 函数的参数是 "),s("code",[e._v("gen")]),e._v("，就是之前 "),s("code",[e._v("compose")]),e._v(" 函数返回的 "),s("code",[e._v("generator实例")]),e._v("。")]),e._v(" "),s("p",[e._v("在 "),s("code",[e._v("co")]),e._v(" 返回的 Promise 中，定义了三个函数 "),s("code",[e._v("onFulfilled")]),e._v(" 、 "),s("code",[e._v("onRejected")]),e._v(" 和 "),s("code",[e._v("next")]),e._v("，先看下 "),s("code",[e._v("next")]),e._v(" 的定义。")]),e._v(" "),s("p",[s("code",[e._v("next")]),e._v(" 的参数实际上就是"),s("code",[e._v("gen")]),e._v("每次 "),s("code",[e._v("gen.next()")]),e._v(" 的返回值。如果 "),s("code",[e._v("gen")]),e._v(" 已经执行结束，那么 Promise 将返回；否则，将 "),s("code",[e._v("ret.value")]),e._v(" promise 化，并再次调用 "),s("code",[e._v("onFulfilled")]),e._v(" 和 "),s("code",[e._v("onRejected")]),e._v(" 函数。")]),e._v(" "),s("p",[s("code",[e._v("onFulfilled")]),e._v(" 和 "),s("code",[e._v("onRejected")]),e._v(" 帮助我们推进 "),s("code",[e._v("gen")]),e._v(" 的执行。")]),e._v(" "),s("p",[s("code",[e._v("next")]),e._v(" 和 "),s("code",[e._v("onFulfilled")]),e._v("、"),s("code",[e._v("onRejected")]),e._v(" 的组合，实现了 "),s("code",[e._v("generator")]),e._v(" 的递归调用。那么究竟是如何实现的呢？关键还要看 "),s("code",[e._v("toPromise")]),e._v(" 的实现。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function toPromise(obj) {\n  if (!obj) return obj;\n  if (isPromise(obj)) return obj;\n  if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);\n  if ('function' == typeof obj) return thunkToPromise.call(this, obj);\n  if (Array.isArray(obj)) return arrayToPromise.call(this, obj);\n  if (isObject(obj)) return objectToPromise.call(this, obj);\n  return obj;\n}  \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("在 "),s("code",[e._v("toPromise")]),e._v(" 函数中，后三个分支处理分别对 thunk 函数、数组和对象进行了处理，此处略去细节，只需要知道最终都调回了 "),s("code",[e._v("toPromise")]),e._v(" 的前三个分支处理中。这个函数最终返回一个 promise 对象，这个对象的 "),s("code",[e._v("resolve")]),e._v(" 和 "),s("code",[e._v("reject")]),e._v(" 处理函数又分别是上一个 promise 中定义的 "),s("code",[e._v("onFulfilled")]),e._v(" 和 "),s("code",[e._v("onRejected")]),e._v(" 函数。至此，就完成了 "),s("code",[e._v("compose")]),e._v(" 函数返回的 "),s("code",[e._v("generator")]),e._v(" 链的推进工作。")]),e._v(" "),s("p",[e._v("最后还有一个问题需要明确一下，那就是 KOA 中的 "),s("code",[e._v("context")]),e._v(" 是如何传递的。"),s("br"),e._v("\n通过观察前面的代码不难发现，每次关键节点的函数调用都是使用的 "),s("code",[e._v("xxxFunc.call(ctx)")]),e._v(" 的方式，这也正是为什么我们可以在中间件中直接通过 "),s("code",[e._v("this")]),e._v(" 访问 "),s("code",[e._v("context")]),e._v(" 的原因。")])])},[],!1,null,null,null);n.default=t.exports}}]);