(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{259:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"d3-js-入门简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d3-js-入门简介","aria-hidden":"true"}},[t._v("#")]),t._v(" D3.js 入门简介")]),t._v(" "),s("p",[t._v("在css中，通过模式匹配规则来决定给随着公司数据业务的发展，业务对前端数据可视化能力的要求也越来越高。现在市面上有很多成熟的图表库，比如 "),s("a",{attrs:{href:"https://www.highcharts.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HighCharts"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"http://echarts.baidu.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECharts"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://antv.alipay.com/g2/doc/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("G2"),s("OutboundLink")],1),t._v("，这些图表库都有着完善的封装、开箱即用的文档，基本可以覆盖我们大部分的日常开发需要。但是，在这些图表库中，除了 G2 保留了一定的定制能力以外，大部分图表库都是按照图表的类型来划分实现的。也就是说我们只能使用图表库提供的图表，无法在此基础上进行定制，而这在很多时候恰好是影响我们开发效率的地方。"),s("br"),t._v("\n为了能覆盖到日常开发过程中的绝大部分场景，有必要学习一波更为底层的图表库 "),s("a",{attrs:{href:"https://d3js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("D3.js"),s("OutboundLink")],1),t._v("。之所以说 D3 更为底层，是因为 D3 并没有对图表进行归类，D3 只是一个 JavaScript 库，开发者可以通过 D3 来方便的操作 DOM，绘制任何想绘制的图形。文档树中的元素应用什么样的样式。这些模式规则就被称为选择器。一个选择器可能只是一个单一的元素名称，也可能是包含复杂上下文的模式规则集合。如果一个元素满足一个选择器中的所有条件，我们就称这个选择器选中了该元素。")]),t._v(" "),s("h2",{attrs:{id:"before-you-go"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#before-you-go","aria-hidden":"true"}},[t._v("#")]),t._v(" Before You Go")]),t._v(" "),s("p",[t._v("除了前面列举的一些图表库以外，大家经常听到的数据可视化相关的名词应该还有 "),s("a",{attrs:{href:"https://threejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Three.js"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%B8%AE%E6%94%BE%E5%90%91%E9%87%8F%E5%9C%96%E5%BD%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("SVG"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Canvas_(HTML%E5%85%83%E7%B4%A0)",target:"_blank",rel:"noopener noreferrer"}},[t._v("Canvas"),s("OutboundLink")],1),t._v(" 等。那么他们之间有什么关系呢？或者说，他们之前有什么不同呢？"),s("br"),t._v("\n首先，我们知道 SVG 和 Canvas 是浏览器提供的原生能力。 SVG 全称叫可缩放矢量图，跟 HTML 一样，有自己的命名空间，也就是说有一系列的标签可以使用。而 Canvas 是 HTML5 中的新标签，用于客户端的图形绘制。Canvas 和 SVG 之间的一个重要的不同是，Canvas 有一个基于 JavaScript 的绘图 API，而 SVG 使用一个 XML 文档来描述绘图。SVG 可以轻松的被编辑，而 Canvas 只能清空画布后重新绘制。\nHighCharts 是基于 SVG （现代浏览器中使用 SVG，老浏览器中使用的是 VML）开发的图表库。收费的，此处不做过多说明。\n简单对比一下 ECharts 和 G2。ECharts 和 G2 都是基于 Canvas 开发，都有一套完善的图表和文档。ECharts 由百度开发，目前开源，功能也较为完善。G2 由蚂蚁金服开发，是一个语义化图表生成工具，它提供了一整套图形语法，开发者可以通过 G2 的语法搭建出多种图表。借用 ECharts 作者的一句话，G2 是面粉，ECharts 是面条，皆微小但美好。由于二者皆有比较完善的文档，此处不做详细说明。"),s("br"),t._v("\nThree.js 是基于 "),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/WebGL",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebGL"),s("OutboundLink")],1),t._v(" 开发的 3D 动画库，主要用于 3D 动画的制作，此处不做说明。\nD3.js 基于 SVG 实现，为开发者提供了丰富的基于数据操作 DOM 的类库，目前最新的 V4 版本中也已经支持 Canvas。需要注意的是，D3 并没有划分具体的图表类型，还是提供了大量的绘图 API。")]),t._v(" "),s("p",[t._v("了解了各个组件库的关系，我们就可以有目的的学习我们需要的内容了。")]),t._v(" "),s("h2",{attrs:{id:"d3-的最小化说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d3-的最小化说明","aria-hidden":"true"}},[t._v("#")]),t._v(" D3 的最小化说明")]),t._v(" "),s("p",[t._v("看过 D3 的文档的同学都会有这样的感觉，D3 的文档就像是若干根交织在一起的棉线，静静的放在那里，不多不少，就是没有头绪。这里对 D3 做一个最小化说明。所谓最小化说明就是能成功完成一个简单图表需要的最少的 API 使用说明。之后，我们可以据此延伸开去，系统的熟悉 D3 的能力。")]),t._v(" "),s("h3",{attrs:{id:"_1-选择集与-data-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-选择集与-data-join","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 选择集与 Data Join")]),t._v(" "),s("p",[t._v("前面已经说过，D3 是一个 JavaScript 类库，提供了一套根据数据操作 DOM 的 API。那么，首先我们就来说说如何通过 D3 操作 DOM。"),s("br"),t._v("\n在此之前，我们先回想一下，通过 JavaScript 是如何操作 DOM 的。假设我们有如下页面（省略不必要部分）：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("这是一个段落"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("通过 JavaScript 改变段落字体颜色的方式可能如下：")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.container p'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("那么通过 D3 如何实现呢？")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("d3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.container p'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'color'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("怎么样，是不是跟原生 JavaScript 很像？这里我们使用了 D3 的选择集 API "),s("a",{attrs:{href:"https://github.com/d3/d3-selection/blob/master/README.md#selection",target:"_blank",rel:"noopener noreferrer"}},[t._v("Selection"),s("OutboundLink")],1),t._v("。通过 Selection（选择集） 开发者可以设置页面元素的 attributes, styles, properties, HTML 或者 text 内容。那么问题来了，选择集 跟原生 JavaScript 有什么不同呢？首先，选择集支持链式语法，相信了解 JQuery 的同学都知道这个特性的好处。其次，D3 是一个数据驱动的类库，选择集提供了一套强大的数据驱动操作，那就是 "),s("a",{attrs:{href:"https://github.com/d3/d3-selection/blob/master/README.md#joining-data",target:"_blank",rel:"noopener noreferrer"}},[t._v("Data Join"),s("OutboundLink")],1),t._v("。\n"),s("img",{attrs:{src:"http:/.cbndata.org/tapas-fe/image/d3/data-join.png",alt:"data-join"}}),s("br"),t._v("\n如上图所示，D3 将数据和选择集做了一些处理，将两者分成了三个部分，Enter、Update 和 Exit。数据是一个集合，选择集也是一个集合，如何通过数据来更新 DOM 呢。我们知道，选择集是 DOM 元素的集合，所有对选择集的操作都是对 DOM 元素的批量操作。"),s("br"),t._v("\n假设我们有数据集")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("选择集为")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" selection "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.container p'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("从上面的 html 片段我们知道，选择集此时有一个元素。通过 data join")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("selection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("我们得到了两个集合 update 和 enter，update 就是数据集和选择集匹配的部分，表示我有数据，你有元素，我们一一对应，类似于集合里面的交集概念。enter 表示数据集中除了 update 以外多出来的一部分，因为数据集比选择集大。此时我们通过")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("selection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add p tag'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("就可以向选择集中添加 p 元素，此时所有 enter 集合都将进入 update 集合。"),s("br"),t._v("\n经过上面的操作，'.container' 中已经包含了 4 个 p 元素，此时，我们更换一下数据集，")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("selection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("我们将数据集缩小到只包含一个元素，经过 data join，产生两个集合，update 和 remove。update 不再多说，remove 是选择集中除了 update 以外多出来的部分。此时我们通过")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("selection"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("即可删除多余的元素。")]),t._v(" "),s("h3",{attrs:{id:"比例尺-scale"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比例尺-scale","aria-hidden":"true"}},[t._v("#")]),t._v(" 比例尺 Scale")]),t._v(" "),s("p",[t._v("我们知道，要想将数据展示到固定大小的图形中，就需要对数据进行归一化操作。所谓归一化，其实就是建立一个原始数据到图形数据的映射关系，有了这个映射关系，我们才知道将原始数据放到图形中的具体位置。"),s("br"),t._v("\nD3 通过"),s("a",{attrs:{href:"https://github.com/d3/d3-scale",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scale"),s("OutboundLink")],1),t._v("来完成归一化操作。D3提供了多种 Scale，有连续的，有离散的，都是为了适应不同数据，来建立原始数据到图形数据的映射关系。开发者可以根据原始数据类型选择对应的 Scale。")]),t._v(" "),s("h3",{attrs:{id:"坐标轴-axis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#坐标轴-axis","aria-hidden":"true"}},[t._v("#")]),t._v(" 坐标轴 Axis")]),t._v(" "),s("p",[t._v("要画图就离不开坐标轴，D3 提供了四个"),s("a",{attrs:{href:"https://github.com/d3/d3-axis",target:"_blank",rel:"noopener noreferrer"}},[t._v("坐标轴函数"),s("OutboundLink")],1),t._v(" axisTop、axisRight、axisBottom、axisLeft，分别对应上、右、下、左。这四个函数的参数都是一个 Scale，就是前面说的比例尺。也就是说，我们只需要定义好坐标轴的比例尺，D3 会帮我们自动绘制坐标轴。"),s("br"),t._v("\n除了定义比例尺以外，D3 还提供了一些定制坐标轴的 API，比如设置刻度线的个数，刻度线的显示文案等，详情请参考 API。")]),t._v(" "),s("h3",{attrs:{id:"各种形状"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#各种形状","aria-hidden":"true"}},[t._v("#")]),t._v(" 各种形状")]),t._v(" "),s("p",[t._v("绘制完坐标轴以后，我们就需要绘制图表的核心内容图形了。图表有很多种，对应的图形也有很多种。比如经典的直线图、饼图等。"),s("br"),t._v("\nD3 的 "),s("a",{attrs:{href:"https://github.com/d3/d3-shape",target:"_blank",rel:"noopener noreferrer"}},[t._v("Shape"),s("OutboundLink")],1),t._v(" 模块就定义了很多种图形。这里需要说明一点，Shape 模块只是生成要绘制的图形的数据，并不直接帮你绘制图形。开发者需要借助于前面提到的选择集和 Data Join 自行绘制图形。")]),t._v(" "),s("p",[t._v("下面的代码演示了如何绘制环图：")]),t._v(" "),s("div",{staticClass:"language-JavaScript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pie "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pie")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取绘制饼图的函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arcs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pie")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("calcData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 pie 函数计算出一个包含起止弧度的对象数据，用于绘图使用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pathData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arcs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("arc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取圆弧路径计算函数")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arcConf "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    innerRadius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("157.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置圆环内径")]),t._v("\n    outerRadius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("170")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置圆环外径")]),t._v("\n    startAngle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("startAngle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置起始角度")]),t._v("\n    endAngle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("endAngle "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置结束角度")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("arc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arcConf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算出具体的圆弧路径数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsvg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectAll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pathData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data join")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("enter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'path'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绘制 svg path")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("attr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("d")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("上述代码较为完整的展示了一个圆环的绘制过程。值得注意的是，Shape 只提供数据，最终我们还是需要自己通过选择集和 Data Join 才做 DOM 绘制图形。")]),t._v(" "),s("h3",{attrs:{id:"其他高阶内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他高阶内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 其他高阶内容")]),t._v(" "),s("p",[t._v("通过上面的介绍，我们已经了解了通过 D3 绘制图形的基本方法。由于篇幅和本篇文章定位限制，D3 提供的诸如地理图表、力学仿真等高阶内容，此处不做说明。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("D3 是一个强大的 JavaScript 类库，开发者可以方便的通过 D3 来完成数据驱动的图表绘制。虽然 D3 的文档篇幅浩大，但是缺乏系统性和必要的 Quick Start 指导，导致学习曲线比较陡峭，学习成本较高。本文是我最近一段时间学习 D3 的小总结，希望对后面学习 D3 的同学有一些帮助，也欢迎对 D3 感兴趣的同学一起讨论。")])])},[],!1,null,null,null);a.default=e.exports}}]);