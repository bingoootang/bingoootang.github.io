(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{289:function(s,n,e){"use strict";e.r(n);var a=e(4),t=Object(a.a)({},function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"docker-构建镜像过程中-npm-安装-私有-git-repo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-构建镜像过程中-npm-安装-私有-git-repo","aria-hidden":"true"}},[s._v("#")]),s._v(" Docker 构建镜像过程中 npm 安装 私有 git repo")]),s._v(" "),e("p",[s._v("Docker 已是主流的虚拟化技术，越来越多的应用都通过 Docker 来构建镜像和部署。目前，团队的所有 Node 应用都已经 Docker 化。在这个过程中，我们碰到了一个问题，就是在构建镜像的时候，通过 "),e("code",[s._v("npm install")]),s._v(" 安装 github 私有仓库依赖，总是会报下面的错误：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm ERR! Error while executing:\nnpm ERR! /usr/bin/git ls-remote -h -t ssh://git@github.com/<git-user>/<repo-name>.git\nnpm ERR!\nnpm ERR! Host key verification failed.\nnpm ERR! fatal: Could not read from remote repository.\nnpm ERR!\nnpm ERR! Please make sure you have the correct access rights\nnpm ERR! and the repository exists.\nnpm ERR!\nnpm ERR! exited with error code: 128\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /root/.npm/_logs/2018-02-09T06_19_57_405Z-debug.log\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("从错误日志可以看出，由于 git 使用 ssh 协议来安装依赖，提示 host key 认证失败，没有权限。不难想到，在构建过程中，ssh 在用户的 home 目录下没有找到正确的 ssh_key（~/.ssh/id_rsa)，导致认证失败。")]),s._v(" "),e("p",[s._v("那么，如何解决这个问题呢？首先，观察下 "),e("code",[s._v("package.json")]),s._v(" 中的依赖安装方式：")]),s._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"dependencies"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"somepkg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"github:<git-user>/<repo-name>"')]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("这是 npm 提供的一种安装依赖的方式，即从 github 仓库中安装依赖。当采用这个方式安装依赖的时候，npm 会使用 git 将目标依赖的仓库代码 clone 下来，在 clone 的时候，如何依赖中没有指定协议，npm 会默认使用 git+ssh  的方式来访问 github 。如果失败，就出现了开头的那个错误并退出安装。")]),s._v(" "),e("p",[s._v("了解了原因之后，我们就可以寻找针对性的解决办法了。既然是 ssh 连接失败，那么我们是不是可以模拟我们本地安装的时候的环境呢？即在镜像构建过程中，建一个 .ssh 目录，将事先准备好的 ssh_key 放进去呢？"),e("br"),s._v("\n说干就干，在 "),e("code",[s._v("Dockerfile")]),s._v(" 中我们加入了如下命令：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("RUN "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" ~/.ssh\nCOPY /mysshkey ~/.ssh\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("启动构建之后依然报错。通过排查发现，ssh 还是没有使用我们提供 ssh_key，~ 目录下也没有 .ssh 目录。查询资料发现，这可能跟 Docker 分层构建有关，由于没有细究这个问题，这里不详细说明。")]),s._v(" "),e("p",[s._v("既然简单粗暴的方式不行，那我们就找一个更简单粗暴的方式。"),e("br"),s._v("\n通过查询 "),e("code",[s._v("npm install")]),s._v(" 的文档发现，npm 在通过 "),e("code",[s._v("npm install <git remote url>")]),s._v(" 方式安装依赖的时候，支持通过 "),e("code",[s._v("GIT_SSH")]),s._v(" 环境变量传入一个脚本给 git，进而 git 会使用我们指定的脚本而不是默认的 ssh 来 clone 仓库。因此，替换刚才的命令为，")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("ENV GIT_SSH"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/node-image/custom-ssh.sh"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("其中 "),e("code",[s._v("/node-image/custom-ssh.sh")]),s._v(" 就是我们的自定义脚本，内容如下：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env bash")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ssh")]),s._v(" -i /node-image/.ssh/id_rsa \\\n  -o UserKnownHostsFile"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/dev/null \\\n  -o StrictHostKeyChecking"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("no \\\n  "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("不难看出，这个 "),e("code",[s._v("custom-ssh.sh")]),s._v(" 会让 ssh 使用我们预先准备好的 "),e("code",[s._v("/node-image/.ssh/id_rsa")]),s._v(" 来访问 github，这样就可以顺利安装私有仓库的依赖了。")]),s._v(" "),e("p",[s._v("完整的 "),e("code",[s._v("Dockerfile")]),s._v(" 样例如下：")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("FROM node:8\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Set the working directory to /app")]),s._v("\nWORKDIR /node-image\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy the current directory contents into the container at /app")]),s._v("\nADD "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v(".")]),s._v(" /node-image\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# change permission")]),s._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" 400 /node-image/.ssh/id_rsa\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# add executable permission to ssh.sh")]),s._v("\nRUN "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" +x /node-image/ssh.sh\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set GIT_SSH env so that npm can use to install private github repo")]),s._v("\nENV GIT_SSH"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/node-image/ssh.sh"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("其实上面的方法只是解决问题的途径之一，还有一种是通过 https 协议来安装，即在项目依赖中写死依赖的形式为:")]),s._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"dependencies"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"somepkg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git+https://<mytoken>@github.com/<git-user>/<git-repo>"')]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("这个 "),e("code",[s._v("mytoken")]),s._v(" 可以通过 "),e("a",{attrs:{href:"https://github.com/settings/tokens",target:"_blank",rel:"noopener noreferrer"}},[s._v("Personal access tokens"),e("OutboundLink")],1),s._v(" 来生成。")])])},[],!1,null,null,null);n.default=t.exports}}]);