(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{256:function(t,e,s){"use strict";s.r(e);var a=s(4),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"聊聊网页布局的那些事（一）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聊聊网页布局的那些事（一）","aria-hidden":"true"}},[t._v("#")]),t._v(" 聊聊网页布局的那些事（一）")]),t._v(" "),s("h2",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("h3",{attrs:{id:"设备像素（device-pixels）和-css-像素（css-pixels）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设备像素（device-pixels）和-css-像素（css-pixels）","aria-hidden":"true"}},[t._v("#")]),t._v(" 设备像素（device pixels）和 css 像素（css pixels）")]),t._v(" "),s("p",[t._v("设备像素（也叫物理像素），表示具体设备的真实像素多少，通常可以通过 "),s("code",[t._v("screen.width/height")]),t._v(" 获取。css 像素（也叫逻辑像素），表示开发者书写的样式中的像素多少。")]),t._v(" "),s("p",[t._v("设备像素与 css 像素是一一对应的吗？不一定。"),s("br"),t._v("\n一般在没有缩放的情况下，一个 css 像素对应一个设备像素。比如，在宽度为 1920 像素的显示器上，一行可以放置 10 个宽度为 192 像素的方块。但是，如果用户对网页进行了放大，那这 10 个方块将出现换行。这是因为，浏览器是通过计算 css 像素和设备像素的换算关系来实现缩放的。"),s("br"),t._v("\n默认情况下，或者说在缩放比例为 100% 的情况下，css 像素与设备像素的比例为 100%，即一个 css 像素对应一个设备像素。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pixel-0.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("当用户对浏览器进行放大时，css 像素会被“放大”，即 css 像素会根据用户放大的比例占用一定的设备像素，比如用户放大 200%，那么一个 css 像素将对应两个设备像素。比例关系如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pixel-1.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("同理，当用户对浏览器进行缩小时，css 像素会被“缩小”，一个 css 像素将占用小于一下设备像素的位置。比例关系如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pixel-2.jpg",alt:"IMAGE"}})]),t._v(" "),s("h3",{attrs:{id:"屏幕尺寸（screen-size）和窗口尺寸（window-size）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#屏幕尺寸（screen-size）和窗口尺寸（window-size）","aria-hidden":"true"}},[t._v("#")]),t._v(" 屏幕尺寸（Screen size）和窗口尺寸（Window size）")]),t._v(" "),s("p",[t._v("屏幕尺寸，通俗的说就是显示器的尺寸，可以通过 "),s("code",[t._v("screen.width/height")]),t._v(" 来获取，值为设备像素。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pc-screen-size.jpg",alt:"IMAGE"}})]),t._v(" "),s("blockquote",[s("p",[t._v("注意，IE8 中通过这两个属性获取的值为 css 像素。")])]),t._v(" "),s("p",[t._v("窗口尺寸，就是浏览器窗口内部的可用尺寸，开发者根据这个尺寸进行网页布局。可以通过 "),s("code",[t._v("window.innerWidth/innerHeight")]),t._v(" 来获取，值为 css 像素。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pc-window-size.jpg",alt:"IMAGE"}})]),t._v(" "),s("blockquote",[s("p",[t._v("注意，IE8 和 IE9 中不支持这两个属性。")])]),t._v(" "),s("p",[t._v("当用户缩放时，窗口尺寸的大小也会跟着缩放。")]),t._v(" "),s("h3",{attrs:{id:"视口（viewport）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#视口（viewport）","aria-hidden":"true"}},[t._v("#")]),t._v(" 视口（viewport）")]),t._v(" "),s("h4",{attrs:{id:"_1-pc-浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-pc-浏览器","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. PC 浏览器")]),t._v(" "),s("p",[t._v("视口的作用是限制 "),s("code",[t._v("<html>")]),t._v(" 元素，通常，"),s("code",[t._v("<html>")]),t._v(" 元素的宽度与视口的宽度相等，而视口的宽度通常与浏览器窗口的宽度相等。这就是为什么应用了下面样式的元素宽度始终是浏览器窗口宽度的一半的原因。")]),t._v(" "),s("div",{staticClass:"language-css line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body > div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50%"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("我们可以通过 "),s("code",[t._v("document.documentElement.clientWidth/clientHeight")]),t._v(" 这两个属性来获取视口的尺寸。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pc-viewport-size.jpg",alt:"IMAGE"}})]),t._v(" "),s("blockquote",[s("p",[t._v("前面说到，"),s("code",[t._v("window.innerWidth/innerHeight")]),t._v(" 表示浏览器窗口尺寸，它与 "),s("code",[t._v("document.documentElement.clientWidth/clientHeight")]),t._v(" 的区别是 "),s("code",[t._v("window.innerWidth/innerHeight")]),t._v(" 包含滚动条的尺寸，而 "),s("code",[t._v("document.documentElement.clientWidth/clientHeight")]),t._v(" 不包含。")])]),t._v(" "),s("p",[t._v("我们知道，"),s("code",[t._v("document.documentElement")]),t._v(" 实际上就是 "),s("code",[t._v("<html>")]),t._v(" 元素，那么如果我们修改了 "),s("code",[t._v("document.documentElement.clientWidth/clientHeight")]),t._v(" 的大小是否就可以修改视口的大小呢？答案是否定的，"),s("code",[t._v("document.documentElement.clientWidth/clientHeight")]),t._v(" 只表示视口的尺寸大小且不可修改。如果需要修改 "),s("code",[t._v("<html>")]),t._v(" 元素的尺寸，可以通过 "),s("code",[t._v("document.documentElement.offsetWidth/offsetHeight")]),t._v(" 来完成。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/pc-document-size.jpg",alt:"IMAGE"}})]),t._v(" "),s("h4",{attrs:{id:"_2-移动浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-移动浏览器","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 移动浏览器")]),t._v(" "),s("p",[t._v("在移动浏览器中，由于手机的屏幕要远小于 PC 的屏幕，因此，基于 PC 浏览器开发的网页在手机上显示会有遇到很多问题。比如，原先在 PC 浏览器中侧边栏的宽度为视口宽度的 40%，在移动浏览器中，侧边栏将变得非常小，无法正常显示里面的内容。为了解决类似这样的问题，移动端浏览器引入的两个视口概念：可视视口（visual viewport）和布局视口（layout viewport）。")]),t._v(" "),s("p",[t._v("可视视口表示当前显示在屏幕上的页面部分，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/visual-viewport-size.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("用户可以滑动页面查看其它部分，或者缩放来改变可视视口的大小。")]),t._v(" "),s("p",[t._v("但是，css 样式中的尺寸，是根据布局视口的尺寸来确定的。布局视口通常会比可视视口大很多。"),s("br"),t._v("\n因此，"),s("code",[t._v("<html>")]),t._v(" 元素的尺寸与布局视口的尺寸一致，从而 css 样式中可用尺寸会比真实的屏幕尺寸大很多。")]),t._v(" "),s("blockquote",[s("p",[t._v("布局视口的大小由各个厂商确定，通过大于 800 个像素。")])]),t._v(" "),s("p",[t._v("通常情况下，移动浏览器会缩小网页以尽可能将所有的内容呈现在屏幕上，因此，初始情况下，布局视口通常与可视视口尺寸相同，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/layout-viewport-size-0.jpg",alt:"IMAGE"}}),t._v(" "),s("img",{attrs:{src:"/images/2018/website-layout/layout-viewport-size-1.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("当用户对网页进行缩放时，布局视口的尺寸不再改变，可视视口的尺寸发生改变，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/layout-viewport-size-2.jpg",alt:"IMAGE"}}),t._v(" "),s("img",{attrs:{src:"/images/2018/website-layout/layout-viewport-size-3.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("开发者可以通过 "),s("code",[t._v("document.documentElement.clientWidth/clientHeight")]),t._v(" 来获取布局视口的尺寸，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/layout-viewport-size-4.jpg",alt:"IMAGE"}}),t._v(" "),s("img",{attrs:{src:"/images/2018/website-layout/layout-viewport-size-5.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("可以通过 "),s("code",[t._v("window.innerWidth/innerHeight")]),t._v(" 来获取可视视口的尺寸(存在浏览器兼容问题，不一定准确)，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/visual-viewport-size-1.jpg",alt:"IMAGE"}})]),t._v(" "),s("blockquote",[s("p",[t._v("当用户缩放网页时，"),s("code",[t._v("window.innerWidth/innerHeight")]),t._v(" 的值会相应发生改变。")])]),t._v(" "),s("p",[t._v("前面说到，移动浏览器通常会缩放网页以最大化显示网页信息，如图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/mobile-website-initial.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("当我们放大网页时，大多数浏览器会保持元素的大小，此时文字将变得难以阅读，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/mobile-website-zoomin.jpg",alt:"IMAGE"}})]),t._v(" "),s("p",[t._v("开发者可以通过 "),s("code",[t._v("<meta>")]),t._v(" 标签来指定初始的布局视口的尺寸。")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("上面的代码指定初始的布局视口的宽度为设备的宽度。如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/2018/website-layout/mobile-website-zoom-adapt.jpg",alt:"IMAGE"}})]),t._v(" "),s("blockquote",[s("p",[t._v("这个 "),s("code",[t._v("<meta>")]),t._v(" 标签最初由苹果公司引入，后来被其他浏览器所支持。")])]),t._v(" "),s("p",[s("code",[t._v("<meta>")]),t._v(" 标签的一般格式为：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("name=value,name=value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("每一个 name/value 对是一个指令，总共有六个：")]),t._v(" "),s("ul",[s("li",[t._v("width 指定布局视口的宽度")]),t._v(" "),s("li",[t._v("initial-scale 指定初始缩放比例，并设置布局视口的宽度")]),t._v(" "),s("li",[t._v("minimum-scale 指定最小缩放比例")]),t._v(" "),s("li",[t._v("maximum-scale 指定最大缩放比例")]),t._v(" "),s("li",[t._v("height 指定布局视口的高度，目前还没有被很好的支持")]),t._v(" "),s("li",[t._v("user-scalable 是否允许用户缩放，值为 "),s("code",[t._v("no")]),t._v(" 是不允许缩放")])]),t._v(" "),s("p",[t._v("以上指令中，"),s("code",[t._v("width")]),t._v(" 指定有一个取值为 "),s("code",[t._v("device-width")]),t._v("，即设置布局视口的宽度为设备宽度。"),s("br"),t._v("\n当用户对页面进行缩小（放大）时，更多（更少）的 CSS 像素会被填入可视视口中来，换句话说，可视视口的尺寸会跟着放大（缩小）。在缩放过程中，浏览器会根据一个厂商指定值和具体的缩放比率来计算可视视口的大小。这个指定值是各个厂商为了能让页面在设备上最好的展示而指定的，也被成为理想视口（ideal viewport）的尺寸，通常情况下这个尺寸与设备屏幕尺寸相同，比如 iPhone4 的大小为 320px。因此，理想视口与可视视口的关系为：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("visual viewport width = ideal viewport width / zoom factor\nzoom factor = ideal viewport width / visual viewport width\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("由此公式，可以看出 "),s("code",[t._v("initial-scale")]),t._v(" 的工作过程为，先设置初始缩放比例，据此通过理想视口计算出可视视口的尺寸。如果未设置 "),s("code",[t._v("width")]),t._v(" 指令，那么通常情况下，最后会根据可视视口的尺寸设置布局视口的尺寸。")]),t._v(" "),s("p",[t._v("前面说到，设置 "),s("code",[t._v("width")]),t._v(" 指令，如 "),s("code",[t._v("width=400")]),t._v(" 也可以指定布局视口的宽度，那么，同时设置 "),s("code",[t._v("width")]),t._v(" 和 "),s("code",[t._v("initial-scale")]),t._v(" 的时候，浏览器如何处理呢？比如设置如下的指令：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("initial-scale=1,width=400"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("答案是，浏览器会取当中较大的那个值作为布局视口的宽度。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("不同的厂商根据不同设备的尺寸给出对应的默认布局视口和理想视口的大小，并在显示页面的时候根据实际情况进行缩放。归根结底，都是为了更好的展示页面。在 PC 浏览器中，视口的尺寸就是浏览器窗口的尺寸，用户缩放会改变设备像素和 css 像素之间的比例关系。在移动端浏览器中，会提供一个布局视口用于页面渲染，提供一个可视视口给用户查看网页。为了能更好的显示网页，通常布局视口的尺寸会比设备屏幕的尺寸要大，用户可以通过平移和缩放来浏览页面的不同区域。如果没有设置 meta 标签，那么为了更好的展示网页和用户体验，默认情况下，布局视口和可视视口的尺寸相同。如果通过 meta 设置了 "),s("code",[t._v("width")]),t._v(" 指令，在没有缩放的情况下，布局视口和可视视口大小相同，都是指令指定的大小。如果通过 meta 设置了 "),s("code",[t._v("initial-scale")]),t._v(" 没有设置 "),s("code",[t._v("width")]),t._v("，那么，布局视口采用默认大小，可视视口会进行缩放。用户缩放的是可视视口的大小，布局视口的大小保持不变。")]),t._v(" "),s("p",[t._v("通常情况下，为了减少移动端的适配工作，我们会将布局视口设置为设备的宽度，然后再通过一些工程化的方案将设计稿上的尺寸映射到对应设备的布局视口尺寸即可。")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("initial-scale=1,width=device-width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("参考文章："),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.quirksmode.org/mobile/viewports.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("A tale of two viewports — part one"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.quirksmode.org/mobile/viewports2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("A tale of two viewports — part two"),s("OutboundLink")],1),s("br"),t._v(" "),s("a",{attrs:{href:"https://www.quirksmode.org/mobile/metaviewport/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Media viewport"),s("OutboundLink")],1)])])},[],!1,null,null,null);e.default=n.exports}}]);