(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{285:function(e,a,t){"use strict";t.r(a);var r=t(4),l=Object(r.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"五分钟看懂-https"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五分钟看懂-https","aria-hidden":"true"}},[e._v("#")]),e._v(" 五分钟看懂 HTTPS")]),e._v(" "),t("p",[e._v("HTTPS 的基础是密码学，而密码学是一门非常复杂的科学，里面包含了大量的数学证明。但是，作为使用者来说，我们不需要了解每一个算法和具体的证明过程，仅仅知道大概的原理就可以了。")]),e._v(" "),t("p",[e._v("在互联网上，我们所有的活动（比如购物、浏览网页等），最终都归于客户端向服务器发送信息和客户端从服务器接收信息。为了方便理解，我们称呼客户端为 Alice，服务器为 Bob，Alice 和 Bob 之间通过信鸽来传递信息。")]),e._v(" "),t("h2",{attrs:{id:"简单的原始通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单的原始通信","aria-hidden":"true"}},[e._v("#")]),e._v(" 简单的原始通信")]),e._v(" "),t("p",[e._v("如果 Alice 想给 Bob 发消息，那么 Alice 将消息内容绑在信鸽的腿上，信鸽将消息带给 Bob。Bob 打开纸条就可阅读消息了。但是，现在有个叫 Mallory 的家伙，他在中途抓住了信鸽，并修改了消息的内容。那么在接收到消息的时候，Bob 是不知道消息是已经被修改过的。并且，Bob 也无法判断消息是否被修改过。"),t("br"),e._v("\n这其实就是 HTTP 的运行过程。大家应该都有这样一个经历，在使用家里的宽带上网的时候，经常会在浏览器的右下角弹出各种小广告，很多时候原因就是数据请求被运营商劫持了，在 HTTP 协议下，运营商修改了服务器返回的内容，向其中插入了广告。")]),e._v(" "),t("h2",{attrs:{id:"对信息进行加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对信息进行加密","aria-hidden":"true"}},[e._v("#")]),e._v(" 对信息进行加密")]),e._v(" "),t("p",[e._v("为了避免信息在中途被截获，Alice 和 Bob 约定了一个密码，每次发送信息的时候，将每个字母按照字母表的顺序向前移动三位。也就是说，如果 Alice 发送“secret message”，Bob 接收到信息应该是“pbzobq jbppxdb”。Bob 收到信息后再将每个字母按照字母表的顺序向后移动三位即可解读出信息内容。信息经过加密后，即使 Mallory 抓住了信鸽获取到了信息，但是因为不知道信息的加密规则，因此也无法知道具体的信息内容。")]),e._v(" "),t("p",[e._v("这一种加密方法叫做对称秘钥加密，因为知道如何加密信息就知道如何解密信息。上面例子中的加密算法叫做凯撒加密方法，现实中的例子会更加复杂，但是基本道理是一样的。")]),e._v(" "),t("p",[e._v("对称秘钥加密固然可以解决信息的加密问题，但是无法解决密钥的传输问题。试想，Alice 如何能够保证在将密钥传递给 Bob 的时候不被 Mallory 截获呢？假设 Alice 和 Bob 之前从未通信过，那么在第一次通信时，Alice 将密钥传递给 Bob。如果密钥被 Mallory 截获，那么 Mallory 将可以知道 Alice 发给 Bob 的全部消息，并可以进行修改。此时整个加密系统都已经失效了。这就是中间人攻击的典型例子。")]),e._v(" "),t("h2",{attrs:{id:"更好的加密方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更好的加密方式","aria-hidden":"true"}},[e._v("#")]),e._v(" 更好的加密方式")]),e._v(" "),t("p",[e._v("对称秘钥加密解决了信息的加密传输问题，但是无法保证秘钥的加密传输。为了解决这个问题，Alice 和 Bob 使用了另一种信息传递方法。如果 Alice 想给 Bob 发消息时，她将经过如下步骤：")]),e._v(" "),t("ul",[t("li",[e._v("Alice 先让信鸽飞到 Bob 那里，不携带任何信息。")]),e._v(" "),t("li",[e._v("Bob 让信鸽飞回，同时携带一个打开的小空盒子。")]),e._v(" "),t("li",[e._v("Alice 将信息纸条放到空盒子中，并锁上盒子上的锁。")]),e._v(" "),t("li",[e._v("信息飞回 Bob 那里，Bob 用自己的钥匙打开盒子，阅读消息。")])]),e._v(" "),t("p",[e._v("Bob 要给 Alice 发信息的时候，也遵循同样的方式。在整个通信过程中，Mallory 将无从知道密钥，因为盒子中没有携带任何密钥信息。")]),e._v(" "),t("p",[e._v("这种加密方式被成为非对称密钥加密。之所以叫非对称，是因为即使你知道如何加密信息（关闭盒子上的锁），你也不知道如何解密信息（打开盒子）。技术上说，上面例子中的盒子被成为公钥，可以打开盒子的钥匙被成为私钥。")]),e._v(" "),t("h2",{attrs:{id:"信任问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#信任问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 信任问题")]),e._v(" "),t("p",[e._v("非对称秘钥加密也没有完全解决问题。如果 Mallory 将信鸽携带的盒子换掉，换成自己可以打开的盒子，那么 Alice 发给 Bob 的信息还是可以被 Mallory 获取到。为了解决这个问题，Alice 和 Bob 都开始对盒子进行标记。如果 Alice 和 Bob 事前都不知道对方的标记方式呢？此时，Alice 和 Bob 选择了让德高望重、大家都相信的 Ted 来对盒子进行标记。Ted 只有确定标记盒子的请求发起人是 Alice 的时候，才会给盒子做上含有 Alice 信息的标记。当 Mallory 修改标记后，Bob 就会发现盒子是假的，因为 Ted 只给合法的人标记盒子。")]),e._v(" "),t("p",[e._v("技术上说 Ted 的角色被叫做认证中心（Certification Authority）。我们的浏览器中包含了很多认证中心颁发的证书。当我们第一次访问一个网站时，如果这个网站的证书经过认证中心的认证，那么我们就认为这个网站是安全的。")]),e._v(" "),t("h2",{attrs:{id:"效率问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#效率问题","aria-hidden":"true"}},[e._v("#")]),e._v(" 效率问题")]),e._v(" "),t("p",[e._v("现在，Alice 和 Bob 拥有了一套安全的信息传递系统。但是，他们发现每次信鸽携带一个盒子来传递信息要比单纯的传递信息要慢。因此，他们决定通过非对称密钥加密的方法来传递密钥，用对称密钥加密的方法来传递消息。这样既有了非对称加密的安全性，又有了对称加密的效率。"),t("br"),e._v("\n在实际使用中，我们并不会通过信鸽来传递消息，但是采用非对称加密确实比采用对称加密效率低一些，因此，我们也常常使用非对称加密传递密钥，使用对称加密传递信息。")]),e._v(" "),t("p",[e._v("以上就是 HTTPS 相关的全部内容。是不是在不了解具体加密算法的前提下，也能知道 HTTPS 大概的工作原理呢？")])])},[],!1,null,null,null);a.default=l.exports}}]);