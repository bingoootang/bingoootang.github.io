(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{274:function(t,e,i){"use strict";i.r(e);var v=i(4),r=Object(v.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"activity-必知"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#activity-必知","aria-hidden":"true"}},[t._v("#")]),t._v(" Activity 必知")]),t._v(" "),i("p",[t._v("与 PC 应用总是从一个固定入口（比如 main 函数）启动不同，移动端应用的启动入口有很多。比如在一个应用中为了拨打电话可以直接打开拨号应用，而不需要用户主动启动拨号应用来拨号，那么对于拨号应用来说，它的启动入口是不确定的。为了应对这种交互模式，Android 系统通过 Activity 来实现。Activity 是 Android 应用的基石组件之一。一个 Activity 就是应用的一个页面（一屏），如果应用包含多个页面的话，就会有多个 Activity。同一个应用的 Activity 之间并不是强耦合在一起的，相反它们以一种松散的关系组合成应用。事实上，一个应用的 Activity 经常调用其他应用的 Activity，比如前面拨打电话的例子。Activity 之间通过 Intent 来互相调用。")]),t._v(" "),i("h2",{attrs:{id:"状态与生命周期"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#状态与生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态与生命周期")]),t._v(" "),i("p",[t._v("Activity 的生命周期以及各个生命周期之间的转换关系如下图所示："),i("br"),t._v(" "),i("img",{attrs:{src:"/images/2018/activity-basics/lifecycle.jpg",alt:"IMAGE"}})]),t._v(" "),i("p",[t._v("当 Activity 被创建后，首先触发 "),i("code",[t._v("onCreate()")]),t._v("，之后迅速触发 "),i("code",[t._v("onStart()")]),t._v("，此时页面开始可见，通常在这个生命周期中初始化页面 UI 相关代码。之后快速触发 "),i("code",[t._v("onResume()")]),t._v("，此时 Activity 可与用户交互。如果没有其他事件发生，Activity 将一直保持在 Resumed 状态下。当 Activity 转入后台时，触发 "),i("code",[t._v("onPaused()")]),t._v("，此时可以释放一些资源，比如相机等。当用户重新回到 Activity 时，会重新触发 "),i("code",[t._v("onResume()")]),t._v("，此时，需要重新初始化在 "),i("code",[t._v("onPaused()")]),t._v(" 中被释放的资源。Paused 状态持续时间非常短暂，无法执行比较耗时的操作，比如保存数据、发起网络请求等。在 Activity 进入后台后，会触发 "),i("code",[t._v("onStop()")]),t._v("，此时可以进行数据保存、网络请求等耗时操作，同时也应该释放 CPU 密集的资源。当 Activity 被销毁时，触发 "),i("code",[t._v("onDestroy()")]),t._v("，在这个生命周期内，可以进行依稀应用状态数据缓存等操作。")]),t._v(" "),i("p",[t._v("对应 Activity 各个生命周期的状态转换如下："),i("br"),t._v(" "),i("img",{attrs:{src:"/images/2018/activity-basics/state.jpg",alt:"IMAGE"}})]),t._v(" "),i("blockquote",[i("p",[t._v("在应用中，如果存在生命周期敏感的组件，可以通过 "),i("a",{attrs:{href:"https://developer.android.com/reference/android/arch/lifecycle/package-summary.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("android.arch.lifecycle"),i("OutboundLink")],1),t._v(" 来实现，从而可以获取 Activity 状态变更之后的对应事件，如上图所示。")])]),t._v(" "),i("h2",{attrs:{id:"状态变更"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#状态变更","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态变更")]),t._v(" "),i("p",[t._v("通常，事件、用户触发或者系统触发都会导致 Activity 的状态发生变化。以下是一些常见的导致 Activity 状态变化的原因以及对应的状态变化。")]),t._v(" "),i("h4",{attrs:{id:"_1-配置变更"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置变更","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.配置变更")]),t._v(" "),i("p",[t._v("有很多场景会导致配置发生变化，比如屏幕方向变化、系统语言变化等。当配置发生变更时，Activity 将会先被销毁再重新创建。因此，原先的 Activity 将会依次触发 "),i("code",[t._v("onPause()")]),t._v("，"),i("code",[t._v("onStop()")]),t._v("，"),i("code",[t._v("OnDestroy()")]),t._v(" 生命周期，新的 Activity 会被创建并触发 "),i("code",[t._v("onCreate")]),t._v("，"),i("code",[t._v("onStart()")]),t._v("，"),i("code",[t._v("onResume()")]),t._v(" 生命周期。")]),t._v(" "),i("blockquote",[i("p",[t._v("在多屏场景下，当用户打开新应用是，即使原来的 Activity 依然对用户可见，它的状态也会进入 Paused 状态。")])]),t._v(" "),i("h4",{attrs:{id:"_2-其他-activity-或者对话框出现在前台（foreground）"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他-activity-或者对话框出现在前台（foreground）","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.其他 Activity 或者对话框出现在前台（foreground）")]),t._v(" "),i("p",[t._v("如果新的 Activity 或者对话框获得焦点并部分覆盖原来的 Activity，那么原来的 Activity 将会进入 Paused 状态，触发 "),i("code",[t._v("onPause()")]),t._v("，当被覆盖的 Activity 返回前台并获得焦点时，触发 "),i("code",[t._v("onResume()")]),t._v("。"),i("br"),t._v("\n如果新的 Activity 或者对话框获得焦点并完全覆盖原来的 Activity，那么原来的 Activity 将会进入 Stopped 状态，触发 "),i("code",[t._v("onPause()")]),t._v(" 和 "),i("code",[t._v("onStop()")]),t._v("，当被覆盖的 Activity 返回前台并获得焦点时，触发 "),i("code",[t._v("onRestart()")]),t._v("，"),i("code",[t._v("onStart()")]),t._v(" 和 "),i("code",[t._v("onResume()")]),t._v("，如果被覆盖的 Activity 被重新初始化，则只会触发 "),i("code",[t._v("onStart()")]),t._v(" 和 "),i("code",[t._v("onResume()")]),t._v("。")]),t._v(" "),i("h4",{attrs:{id:"_3-用户点击返回按钮"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-用户点击返回按钮","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.用户点击返回按钮")]),t._v(" "),i("p",[t._v("当用户点击返回按钮时，系统会认为这是用户主动退出并不在返回，因此会销毁 Activity，触发 "),i("code",[t._v("onPause()")]),t._v("，"),i("code",[t._v("onStop()")]),t._v(" 和 "),i("code",[t._v("onDestroy()")]),t._v("。")]),t._v(" "),i("h4",{attrs:{id:"_4-系统杀死了应用进程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-系统杀死了应用进程","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.系统杀死了应用进程")]),t._v(" "),i("p",[t._v("当系统资源不足，为了给前台的进程提供足够的资源，会选择杀死一些暂时对用户不可见的进程，以下表格展示的是进程被系统杀死的可能性以及对应的进程和 Activity 状态。")]),t._v(" "),i("table",[i("tr",[i("td",[t._v("被系统杀死的可能性")]),t._v(" "),i("td",[t._v("进程状态")]),t._v(" "),i("td",[t._v("Activity 状态")])]),t._v(" "),i("tr",[i("td",[t._v("低")]),t._v(" "),i("td",[t._v("前台（拥有或者即将拥有焦点）")]),t._v(" "),i("td",[t._v("Created"),i("br"),t._v("Started"),i("br"),t._v("Resumed")])]),t._v(" "),i("tr",[i("td",[t._v("中")]),t._v(" "),i("td",[t._v("后台（失去焦点）")]),t._v(" "),i("td",[t._v("Paused")])]),t._v(" "),i("tr",[i("td",[t._v("高")]),t._v(" "),i("td",[t._v("后台（不可见）"),i("hr"),t._v("空")]),t._v(" "),i("td",[t._v("Stopped"),i("hr"),t._v("Destroyed")])])]),t._v(" "),i("p",[i("strong",[t._v("参考链接")])]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://developer.android.com/guide/components/activities/intro-activities",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.android.com/guide/components/activities/intro-activities"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://developer.android.com/guide/components/activities/activity-lifecycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.android.com/guide/components/activities/activity-lifecycle"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://developer.android.com/guide/components/activities/state-changes",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.android.com/guide/components/activities/state-changes"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://developer.android.com/topic/libraries/architecture/lifecycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.android.com/topic/libraries/architecture/lifecycle"),i("OutboundLink")],1)])])])},[],!1,null,null,null);e.default=r.exports}}]);