(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{268:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"同源策略与跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略与跨域","aria-hidden":"true"}},[t._v("#")]),t._v(" 同源策略与跨域")]),t._v(" "),a("h2",{attrs:{id:"什么是同源策略（same-origin-policy）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源策略（same-origin-policy）","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是同源策略（Same-Origin Policy）")]),t._v(" "),a("p",[t._v("同源策略并不是单单指某一种策略，而是浏览器的一种安全机制的统称，用来限制不同域名之间文档、脚本的互相访问。所谓同源，就是两个 URL 的协议头（protocol）、域名（host）与端口号（port）相同，否则就是不同源。比如 "),a("code",[t._v("http://store.company.com/dir2/other.html")]),t._v(" 与 "),a("code",[t._v("http://store.company.com/dir/inner/another.html")]),t._v(" 同源，与 "),a("code",[t._v("https://store.company.com/page.html")]),t._v(" 和 "),a("code",[t._v("http://store.company.com:81/dir/page.html")]),t._v(" 都不同源。"),a("br"),t._v("\n尽管不同 API 的同源策略可能有些许不同，但是总体上都是为了防止用户在访问不可信网站时，阻止这些不可信网站访问可信网站的用户会话等数据。"),a("br"),t._v("\n举个例子，用户浏览器可能同时打开了银行、淘宝、微博等网站，浏览器本地保存了用户在这些网站的会话信息，此时当用户访问一个不可信网站时，同源策略会阻止这个不可信网站读取浏览器本地保存的这些可信网站的数据，以减少攻击可能。")]),t._v(" "),a("p",[t._v("在网络请求中，同源策略在发送数据和接收数据时表现有所不同。一般来说，一个源（one origin）可以给另一个源（another origin）发送数据，但是一个源不可以从另一个源读取数据。这样做是为了防止恶意网站读取可信网站的数据，但是同时这也阻止了两个可信网站之间的数据读取。即使在同源策略下，跨站（cross-site）发送数据也不是完全安全的，因为这可能导致跨站请求伪造（csrf）和点击劫持（clickjacking）。")]),t._v(" "),a("h2",{attrs:{id:"跨域访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域访问","aria-hidden":"true"}},[t._v("#")]),t._v(" 跨域访问")]),t._v(" "),a("p",[t._v("同源策略一定程度上减少了恶意网站的攻击，但是也限制了不同源的可信站点之间的数据交流。以下介绍几种常见的跨域访问形式。")]),t._v(" "),a("h3",{attrs:{id:"修改源（origin）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改源（origin）","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改源（origin）")]),t._v(" "),a("p",[t._v("一个页面可以通过 "),a("code",[t._v("document.domain")]),t._v(" 修改自身的源，但是只能修改为该页面的当前域名或者当前域名的父级域名。如果 "),a("code",[t._v("document.domain")]),t._v(" 被修改成父级域名，那么浏览器在进行同源检测时会使用父级域名进行检测。比如，位于 "),a("code",[t._v("http://store.company.com/dir/other.html")]),t._v(" 页面的脚本，通过")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("domain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"company.com"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("的方式修改了当前域名之后，就可以通过与页面 "),a("code",[t._v("http://company.com/dir/page.html")]),t._v(" 之间的同源检测。")]),t._v(" "),a("blockquote",[a("p",[t._v("这种做法有一个前提条件，就是父级域名的页面也通过相同的方式设置了相同的域名。因为通过 "),a("code",[t._v("document.domain")]),t._v(" 修改源时，浏览器会将端口号设置为 null，因此如果单独将 other.html 的 "),a("code",[t._v("document.domain")]),t._v(" 设置为 "),a("code",[t._v("company.com")]),t._v(" 的话，此时页面的端口号为 null，而 page.html 的端口号为 80，依然无法通过同源检测。")])]),t._v(" "),a("h3",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp","aria-hidden":"true"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),a("p",[t._v("JSONP是常用方法跨域方法，最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。JSONP 的原理是网页通过添加一个 "),a("code",[t._v("<script>")]),t._v(" 元素，向服务器请求JSON数据，这种做法不受同源策略限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。"),a("br"),t._v("\n比如，客户端通过如下代码请求 "),a("code",[t._v("company.com")]),t._v(" 域下的服务，")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadCrossSiteData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"text/javascript"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onload")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("loadCrossSiteData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://company.com/item?callback=logDetail'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logDetail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Item detail is: '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("在服务端，返回如下代码。因为 "),a("code",[t._v("<script>")]),t._v(" 标签请求的脚本，直接作为代码运行，因此只要页面中定义了 "),a("code",[t._v("logDetail")]),t._v(" 函数，该函数就会被立即调用，打印相关数据。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logDetail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'itemName'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("JSONP 由于是通过 "),a("code",[t._v("<script>")]),t._v(" 标签的方式实现跨域，因此只能完成 GET 方法的跨域，无法实现 POST 等方法的跨域。")])]),t._v(" "),a("h3",{attrs:{id:"cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors","aria-hidden":"true"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),a("p",[t._v("CORS 是跨域资源共享（Cross-origin resource sharing）的缩写，它允许浏览器向跨域服务发送 AJAX 请求，从而克服了同源限制。")]),t._v(" "),a("p",[t._v("下图是 CORS 各个浏览器的支持情况。"),a("br"),t._v(" "),a("img",{attrs:{src:"/images/2019/same-origin-policy/cors.jpg",alt:"IMAGE"}})]),t._v(" "),a("p",[t._v("CORS 需要浏览器和服务器同时支持。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，再根据服务端响应的结果判断是否完成请求，请求期间用户不会有任何感觉。因此，实现CORS通信的关键是服务器，一般来说，只要服务器实现了 CORS 接口，就可以跨域通信。")]),t._v(" "),a("p",[t._v("简单来说，当浏览器发现需要向跨域服务发送请求时，会先发一个预检请求（preflight）。该请求是一个 OPTIONS 请求，用来询问服务端是否可跨域，请求头中会携带 "),a("code",[t._v("Origin")]),t._v("、"),a("code",[t._v("Access-Control-Request-Method")]),t._v(" 等字段。服务器收到预检请求以后，检查了Origin、Access-Control-Request-Method 字段以后，确认允许跨源请求，就可以做出响应，响应中包含如下请求头，"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("、"),a("code",[t._v("Access-Control-Allow-Methods")]),t._v("，"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 表明允许哪些域跨域访问，如果为 "),a("code",[t._v("*")]),t._v(" 号则表示允许任何域访问。预检请求通过后，浏览器就会向普通 AJAX 请求一样请求数据，但是会携带上 "),a("code",[t._v("Origin")]),t._v(" 请求头，同时服务器的响应也会带上 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("响应头。")]),t._v(" "),a("blockquote",[a("p",[t._v("CORS 相对于 JSONP 来说更加彻底，可以实现任何 HTTP 方法的跨域访问，是浏览器原生支持的跨域方法。但是比 JSONP 多一次请求，对服务器性能有轻微影响，同时对浏览器版本也有一定的要求。")])]),t._v(" "),a("p",[t._v("以上是对 CORS 的简单定性描述，更多详细细节请参考 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN 文档"),a("OutboundLink")],1),t._v(" 或者 "),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰：跨域资源共享 CORS 详解"),a("OutboundLink")],1),t._v("。")])])},[],!1,null,null,null);s.default=e.exports}}]);